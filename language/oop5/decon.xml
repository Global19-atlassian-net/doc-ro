<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: a6338d747762e36e01061eae19aadca4167375b6 Maintainer: radical Status: ready -->
<!-- CREDITS: simionea -->

 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Constructori și Destructori</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Constructor</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 permite programatorilor să definească constructori pentru clase.
    Clasele care au definit un constructor vor apela această metodă la fiecare
    obiect nou creat, pentru ca acesta (obiectul) să fie utilizabil pentru
    inițializare înante de a fi folosit.
   </para>
   <note>
    <simpara>
     Constructorul-părinte nu este apelat implicit dacă clasa-fiică definește
     un constructor. Pentru a apela un constructor-părinte, este necesar de a
     apela <function>parent::__construct</function> din cadrul
     constructorului-fiu. Dacă clasa-fiică nu definește un constructor, atunci
     acesta poate fi moștenit de la clasa-părinte la fel ca o metodă normală a
     clasei (dacă aceasta nu a fost declarată ca privată).
    </simpara>
   </note>
   <example>
    <title>utilizarea noilor constructori unificați</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "In BaseClass constructor\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "In SubClass constructor\n";
    }
}

class OtherSubClass extends BaseClass {
    // inherits BaseClass's constructor
}

// In BaseClass constructor
$obj = new BaseClass();

// In BaseClass constructor
// In SubClass constructor
$obj = new SubClass();

// In BaseClass constructor
$obj = new OtherSubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Spre deosebire de alte metode, PHP nu va genera un mesaj de eroare de nivel
    <constant>E_STRICT</constant> atunci când <link linkend="object.construct">__construct()</link>
    este suprascrisă cu alți parametri decât cei ai metodei
    <link linkend="object.construct">__construct()</link> din clasa-părinte.
   </para>
   <para>
    Constructorii sunt metode apelate la inițializarea obiectelor.
    Aceștia pot fi definiți cu un număr arbitrar de argumente, care 
    pot fi opționali sau nu, pot ave tip, și pot avea valoare implicită. Argumentele pentru
    constructori se pun între paranteze după numele clasei.
   </para>
   <example>
    <title>Constructori în clasele cu spații de nume</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Apel cu ambii parametrii
$p1 = new Point(4, 5);
// Apel cu argumentul necesar. $y va prelua valoare implictă 0.
$p2 = new Point(4);
// Cu argumente numite (începând cu PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
    </programlisting>
   </example>
   <para>
    Dacă o clasă nu are constructor, sau constructorul nu are nici un argument necesar, parantezele
    pot fi omise.
   </para>
   <sect3>
    <title>Constructorii de stil vechi</title>
    <para>
     Înainte de PHP 8.0.0, clasele din namespaceul global interpretau o metodă cu același nume
     ca și clasa ca un constructor de stil vechi.  Acea syntaxă este învechită și nerecomandată,
     iar utilizarea ei va genera or eroare de tip <constant>E_DEPRECATED</constant> dar metoda constructor va fi apelată.
     Dacă atât <link linkend="object.construct">__construct()</link> cât și o motodă cu acelasi nume cu al clasei sunt
     definite, numai <link linkend="object.construct">__construct()</link> va fi apelat.
    </para>
    <para>
     În clasele din namespace-uri, sau orice altă clasă începând cu PHP 8.0.0, o metodă cu același nume
     cu al clasei nu are însemnătate specială.
    </para>
    <para>Folosiți întotdeauna <link linkend="object.construct">__construct()</link> în cod nou.
    </para>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.promotion">
    <title>Promovarea prin constructor</title>
    <para>
     Începând cu PHP 8.0.0, parametrii constructorului pot fi promovati să corespundă cu o
     proprietate a objectului.  Este foarte des întâlnit ca parametrii constructorului să fie asignat
     unei proprietăți în constructor și apoi să nu se mai lucreze cu acea proprietate.  Promovarea prin constructor
     oferă o scurtătură a acestul caz.  Exemplul de mai sus poate fi rescris în forma următoare.
    </para>
    <example>
     <title>Folosirea promovării prin constructor</title>
     <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
     </programlisting>
    </example>
    <para>
     Atunci când argumentele constructorului include modificatori de vizibilitate, PHP îl va interpreta atât ca
     o proprietate a obiectului cât și drept argument al constructorului, va asigna valoarea argumentului la
     proprietatea respectivă.  Corpul constructorului poate fi gol sau poate contine alte declarații.
     Declarațiile vor fi executate după ce valorile au fost asignate
     la proprietățile corespunzătoare.
    </para>
    <para>
     Nu este necesar să fie promovate toate argumentele. Este posibil să se amestece argumente/proprietăți promovate și nepromovate,
     în orice ordine.  Argumentele promovate nu au nici un impact asupra codului care apelează constructorul.
    </para>
    <note>
     <para>
      Proprietățile obiectelor nu pot fi de tipul <type>callable</type> pentru că ar introduce ambiguități.
      Argumentele promovate, de asemenea, nu pot fi de tipul <type>callable</type>. Orice
      alte <link linkend="language.types.declarations">declarații de tip</link> sunt permise.
     </para>
    </note>
    <note>
     <para>
      <!-- This should be linked once attributes are documented. -->
      Atributele plasate ca argumente la un constructor promovat  vor fi replicate și ca proprietăți dar
      și ca argumente.
     </para>
    </note>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.static">
    <title>Metode de creare statice</title>
    <para>
     PHP suportă un singur constructor într-o clasă.  În unele cazuri, însă, este nevoie
     să permitem crearea unui obiect în diferite feluri cu intrări diferite.
     Metoda recomandată este folosind metode statice care împacheterază constructorul.
    </para>
    <example>
     <title>Folosirea metodelor de creare statice</title>
     <programlisting role="php">
<![CDATA[
<?php
class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        // Put your own logic here.
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);
]]>
     </programlisting>
    </example>
    <para>
     Constructorul poate fi făcut private sau protected pentru a preveni apelarea din exterior.
     Dacă se alege această cale, numai o metodă statică va putea instanția classa.  Pentru că sunt definite în
     aceeași clasă au access la metodele private, chiar dacă obiectele instanțiate sunt 
     diferite.  Un constructor private este opțional și poate fi o alegere bună în funcție
     de cerințe...
    </para>
    <para>
     Cele trei metode statice publice demonstrează feluri diferite de instanțiere a obiectelor.
    </para>
    <simplelist>
     <member><code>fromBasicData()</code> permite exact parametrii necesari, și apoi crează
      obiectul apelând constructorul și returnând rezultatul.</member>
     <member><code>fromJson()</code> acceptă un text în format JSON și îl pre-procesează pentru într-un
     format necesar constructorului. Apoi returnează obiectul nou.</member>
     <member><code>fromXml()</code> acceptă un text XML, în pro-procesează, apoi crează un obiect
     gol.  Constructorul este apelat, dar pentru că toți parapetrii sunt opționali nu sunt 
     pasați.  Apoi asignează valori corecte proprietăților obiectului înainte de a întoarce rezultatul.</member>
    </simplelist>
    <para>
     În toate cele trei cazuri, cuvântul cheie <code>static</code>este tradus în numele clasei în care este scris acest cod.
     În acest caz, <code>Product</code>.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destructori</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 introduce un concept de distrugere a unui obiect similar cu cel
    regăsit în alte limbaje de programare orientate pe obiecte (C++).
    Metoda de distrugere va fi apelată imediat ce nu mai sunt careva referințe
    către un anumit obiect sau în orice ordine în timpul secvenței de deconectare.
   </para>
   <example>
    <title>Exemplu destructor</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyDestructableClass
{
    function __construct() {
        print "In constructor\n";
    }

    function __destruct() {
        print "Destroying " . __CLASS__ . "\n";
    }
}

$obj = new MyDestructableClass();

]]>
    </programlisting>
   </example>
   <para>
    La fel ca la constructori, destructorii-părinti nu vor fi apelați implicit.
    Pentru a apela destructorul-părinte trebuie să apelați explicit
    <function>parent::__destruct</function> în destructorul descendent. De
    asemenea, ca și în cazul constructorilor, o clasă-fiică poate să moștenească
    destructorul părintelui dacă ea nu-și implementează destructorul propriu.
   </para>
   <para>
    Destructorul este apelat chiar dacă scriptul este terminat cu apelul la funcția
    <function>exit</function>. Apelând
    <function>exit</function> într-un destructor
    va preveni apelarea tuturor rutinelor de terminare din scriptul respectiv.
   </para>
   <note>
    <para>
     Destructorii apelați la momentul terminării execuției scriptului au
     antetele HTTP trimise deja. Directorul de lucru în timpul fazei de
     deconectare a scriptului poate să difere în cazul anumitor SAPI-uri
     (de ex. Apache).
    </para>
   </note>
   <note>
    <para>
     Încercarea de a arunca o excepție dintr-un destructor (apelat la momentul
     terminării execuției scriptului) va cauza o eroare fatală.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
